<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Weird random notes (linux)</title><link>https://andir.github.io/</link><description></description><atom:link rel="self" href="https://andir.github.io/categories/cat_linux.xml" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Tue, 14 Jun 2016 16:50:38 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Using multiple client classes with ISC DHCPd</title><link>https://andir.github.io/posts/isc-dhcpd-multiple-classes/</link><dc:creator>Andreas Rammhold</dc:creator><description>&lt;div&gt;&lt;p&gt;Since the internet is lacking examples of how to use multiple classes with a single pool here is one:&lt;/p&gt;
&lt;pre class="code nginx"&gt;&lt;a name="rest_code_df91df1c98284d36b43d09807e902fff-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="s"&gt;"mac-filtered-clients"&lt;/span&gt;
&lt;a name="rest_code_df91df1c98284d36b43d09807e902fff-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_df91df1c98284d36b43d09807e902fff-3"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;match&lt;/span&gt; &lt;span class="s"&gt;binary-to-ascii&lt;/span&gt; &lt;span class="s"&gt;(16,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="s"&gt;,&lt;/span&gt; &lt;span class="s"&gt;":",&lt;/span&gt; &lt;span class="s"&gt;substring(hardware,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="s"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="s"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_df91df1c98284d36b43d09807e902fff-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_df91df1c98284d36b43d09807e902fff-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_df91df1c98284d36b43d09807e902fff-6"&gt;&lt;/a&gt;&lt;span class="k"&gt;subclass&lt;/span&gt; &lt;span class="s"&gt;"mac-filtered-clients"&lt;/span&gt; &lt;span class="s"&gt;"50:7b:00:00:00:00"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# some cool host!&lt;/span&gt;
&lt;a name="rest_code_df91df1c98284d36b43d09807e902fff-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_df91df1c98284d36b43d09807e902fff-8"&gt;&lt;/a&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="s"&gt;"J-client"&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_df91df1c98284d36b43d09807e902fff-9"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;spawn&lt;/span&gt; &lt;span class="s"&gt;with&lt;/span&gt; &lt;span class="s"&gt;option&lt;/span&gt; &lt;span class="s"&gt;agent.circuit-id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_df91df1c98284d36b43d09807e902fff-10"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;match&lt;/span&gt; &lt;span class="s"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(substring(option&lt;/span&gt; &lt;span class="s"&gt;agent.circuit-id,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="s"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="s"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"foo-bar")&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_df91df1c98284d36b43d09807e902fff-11"&gt;&lt;/a&gt;    &lt;span class="kn"&gt;lease&lt;/span&gt; &lt;span class="s"&gt;limit&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_df91df1c98284d36b43d09807e902fff-12"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_df91df1c98284d36b43d09807e902fff-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_df91df1c98284d36b43d09807e902fff-14"&gt;&lt;/a&gt;&lt;span class="k"&gt;subnet&lt;/span&gt; &lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="s"&gt;.168.0.0&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="s"&gt;.255.0.0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_df91df1c98284d36b43d09807e902fff-15"&gt;&lt;/a&gt;     &lt;span class="kn"&gt;pool&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_df91df1c98284d36b43d09807e902fff-16"&gt;&lt;/a&gt;          &lt;span class="kn"&gt;range&lt;/span&gt; &lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="s"&gt;.168.0.10&lt;/span&gt; &lt;span class="mi"&gt;192&lt;/span&gt;&lt;span class="s"&gt;.168.0.150&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_df91df1c98284d36b43d09807e902fff-17"&gt;&lt;/a&gt;          &lt;span class="kn"&gt;allow&lt;/span&gt; &lt;span class="s"&gt;members&lt;/span&gt; &lt;span class="s"&gt;of&lt;/span&gt; &lt;span class="s"&gt;"J-client"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_df91df1c98284d36b43d09807e902fff-18"&gt;&lt;/a&gt;          &lt;span class="kn"&gt;allow&lt;/span&gt; &lt;span class="s"&gt;members&lt;/span&gt; &lt;span class="s"&gt;of&lt;/span&gt; &lt;span class="s"&gt;"mac-filtered-clients"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_df91df1c98284d36b43d09807e902fff-19"&gt;&lt;/a&gt;     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_df91df1c98284d36b43d09807e902fff-20"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;This isn't very special compared to a setup with just a single class but it can be confusing since debugging classes is a pita.. One pitfall I did run into was using the byte representation of the mac-addresses (without the quotes) and using &lt;code&gt;match hardware;&lt;/code&gt;. The example above works for me (tm).&lt;/p&gt;&lt;/div&gt;</description><category>dhcpd</category><category>isc</category><guid>https://andir.github.io/posts/isc-dhcpd-multiple-classes/</guid><pubDate>Mon, 23 May 2016 11:00:00 GMT</pubDate></item><item><title>Postgresql-tmpfs with sytemd.socket-activation for local (ephemeral) data during development</title><link>https://andir.github.io/posts/postgresql-tmpfs-with-sytemdsocket-activation-for-local-ephemeral-data-during-development/</link><dc:creator>Andreas Rammhold</dc:creator><description>&lt;div&gt;&lt;p&gt;During development of database related stuff you commonly run into the "issue" (or non-issue depending on your taste) of running a local database server - or multiple of those.&lt;/p&gt;
&lt;p&gt;In my case I have to run a local postgresql server on my notebook. I asked myself: I'm not always developing on that piece of software, and I do not always require or want a local postgresql server. What can I do about that?!?&lt;/p&gt;
&lt;p&gt;On top of that using my precious SSD to store data I am going to delete anyway souds like a waste (or money). In my development environment I can and want to safely wipe the data often. Also most of the database load comes from running test cases anyway. That stuff doesn't need to end up on my (slow, compared to RAM) disk. Using a tmpfs for that kind of stuff sounds much saner to me.&lt;/p&gt;
&lt;p&gt;The part of running a repetitive clean database setup sounded like the use case for a container based thing. These days docker is pretty "hot" and it solves the issue of distributing re-useable images. There is an official postgresql image on docker hub for various versions of postgresql. I've simply build a new image based on that. It is available on docker hub (&lt;a class="reference external" href="https://hub.docker.com/r/andir/postgresql-tmpfs/"&gt;https://hub.docker.com/r/andir/postgresql-tmpfs/&lt;/a&gt;) or if you prefer to build it on your own you can download the Dockerfile on GitHub (&lt;a class="reference external" href="https://github.com/andir/postgresql-tmpfs"&gt;https://github.com/andir/postgresql-tmpfs&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Now that we are past the introductional blabla here are the systemd unit files I'm using to acheive this:&lt;/p&gt;
&lt;script src="https://gist.github.com/d8307bcead6d83945db462698163ff40.js"&gt;&lt;/script&gt;&lt;noscript&gt;&lt;pre class="literal-block"&gt;
[Service]
ExecStart=/usr/bin/docker run --rm --shm-size=2g -name psql-tmpfs -p 127.0.0.1:5434:5432 -t andir/postgresql-tmpfs
ExecStartPost=/bin/sleep 15
ExecStop=/usr/bin/docker stop psql-tmpfs

&lt;/pre&gt;
&lt;/noscript&gt;&lt;p&gt;You can either put those unit files in &lt;cite&gt;/etc/systemd/system&lt;/cite&gt; or install them as systemd-user units in &lt;cite&gt;~/.config/systemd/user&lt;/cite&gt;.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_4f51ea26d22f46e2b22002d06672b2da-1"&gt;&lt;/a&gt;systemctl daemon-reload
&lt;a name="rest_code_4f51ea26d22f46e2b22002d06672b2da-2"&gt;&lt;/a&gt;systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; postgresql-docker.socket
&lt;/pre&gt;&lt;p&gt;If you try to connect to the postgresql server (&lt;code&gt;nc 127.0.0.1 5432&lt;/code&gt;) you can observe the container while it is starting (&lt;code&gt;journalctl -f&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The default username, password and datbase name is &lt;cite&gt;postgres&lt;/cite&gt;. You can change that by modifying the startup arguments of the docker container. Those are documented at &lt;a class="reference external" href="https://hub.docker.com/_/postgres/"&gt;https://hub.docker.com/_/postgres/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy data trashing \o/&lt;/p&gt;
&lt;p&gt;P.S.: If you've an idea on how to stop the service after x minutes of inactivity please let me know. Stopping the service manually isn't really what I'm after.&lt;/p&gt;&lt;/div&gt;</description><category>docker</category><category>postgresql</category><category>systemd</category><category>tmpfs</category><guid>https://andir.github.io/posts/postgresql-tmpfs-with-sytemdsocket-activation-for-local-ephemeral-data-during-development/</guid><pubDate>Fri, 22 Apr 2016 09:50:09 GMT</pubDate></item></channel></rss>